a:104:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Scratch Disks with ZFS Stripe";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:639:"One common use case for large network storage spaces are scratch disks for scientific and engineering calculations, for video editing, or other applications where large temporary storage spaces are needed. In these cases, redundancy is not important as the data has no long-term purpose; for these applications we are interested in the excellent read/write performance of ZFS striped arrays. With fast storage controllers and network interfaces, proper configuration can saturate their capabilities and deliver impressive I/O performance. This application's analogous technology is the RAID 0, a simple striped storage pool with no parity.";}i:2;i:44;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:683;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:683;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"A simple ZFS striped pool is the default pool created when a redundancy level is not specified with ";}i:2;i:685;}i:8;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:785;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool create";}i:2;i:787;}i:10;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:799;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:", the command for creating storage pools from specified devices. We'll configure our first storage server with several of its disks as a ZFS striped pool. Be sure to take a VM snapshot so we can roll this back and try another configuration later.";}i:2;i:801;}i:12;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1047;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1047;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:1049;}i:15;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1053;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool create";}i:2;i:1055;}i:17;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1067;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" command will be used here specifying the pool name (scratchy), the ";}i:2;i:1069;}i:19;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1137;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"-o";}i:2;i:1139;}i:21;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1141;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" option which lets us specify a zpool property (";}i:2;i:1143;}i:23;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:41:"principlesofzfs#additional_considerations";i:1;s:9:"ashift=12";}i:2;i:1191;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"), and the devices we'd like to include. You can identify these drives by anything they go by in ";}i:2;i:1246;}i:25;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1343;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" /dev/ ";}i:2;i:1345;}i:27;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1352;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" as well as in ";}i:2;i:1354;}i:29;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1369;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" /dev/disk/ ";}i:2;i:1371;}i:31;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1383;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:", and how you specify them is how ";}i:2;i:1385;}i:33;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1419;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"zpool";}i:2;i:1421;}i:35;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1426;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" commands will report them. We'd like to know our disks by partition label, so we will specify the symlinks in ";}i:2;i:1428;}i:37;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1539;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" /dev/disk/by-partlabel/ ";}i:2;i:1541;}i:39;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1566;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1568;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1569;}i:42;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:69:"# zpool create scratchy -o ashift=12 /dev/disk/by-partlabel/zfs{0..5}";i:1;N;i:2;N;}i:2;i:1576;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1576;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"Here we've used a feature of our shell to run the command adding the first six devices because we know exactly how we are laid out. It's also important to know that ashift can only be set when creating the storage pool.";}i:2;i:1654;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1873;}i:46;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1873;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Check out the results of this command with ";}i:2;i:1875;}i:48;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1918;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool status";}i:2;i:1920;}i:50;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1932;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1934;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1941;}i:53;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:428:"# zpool status
  pool: scratchy
 state: ONLINE
  scan: none requested
config:

	NAME        STATE     READ WRITE CKSUM
	scratchy    ONLINE       0     0     0
	  zfs0      ONLINE       0     0     0
	  zfs1      ONLINE       0     0     0
	  zfs2      ONLINE       0     0     0
	  zfs3      ONLINE       0     0     0
	  zfs4      ONLINE       0     0     0
	  zfs5      ONLINE       0     0     0

errors: No known data errors";i:1;N;i:2;N;}i:2;i:1941;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1941;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:398:"ZFS makes this output very understandable. Of note in this example is the name column, which will be arranged as a tree of ZFS' fundamental logical storage unit, the virtual device (VDEV). VDEVs are a unit of one or more storage devices, which are also VDEVs themselves. There are a few different types of VDEVs in the ZFS storage model, and we will describe these as we encounter them in examples.";}i:2;i:2379;}i:56;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2777;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2777;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:647:"This very simple storage pool is composed of twelve VDEVs. Each of these VDEVs are the zfs0 through 11 partitions across each of our disks. The storage pool is the top layer of our array, which represents the storage space distributed across our VDEVs. The default stripe demonstrated here has no redundancy, so if a single disk in this pool fails, the entire pool is lost. Since this is scratch space for calculations, we won't miss the data in the event that we need to replace the failed disk and rebuild a new pool. ZFS even has the ability to keep hot spares installed as failovers, but they would not save this array if a disk were to fault.";}i:2;i:2779;}i:59;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3426;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3426;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"Let's examine some storage arrays which use the redundancy features of ZFS. We can destroy this pool with the command ";}i:2;i:3428;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3551;}i:63;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:24:"# zpool destroy scratchy";i:1;N;i:2;N;}i:2;i:3551;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3551;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" or roll back a previous VM snapshot.";}i:2;i:3583;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3620;}i:67;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3622;}i:68;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Hot Spares";i:1;i:3;i:2;i:3622;}i:2;i:3622;}i:69;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3622;}i:70;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3622;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:374:"ZFS has the ability to keep spare devices on standby to swap in when one in an active zpool fails. The spare can be swapped out manually, but automatically failing to a hot spare is a documented feature of ZFS as well. ZoL documentation that confirms automatic hot spare swapping is not available, so we should test if it works. Take a VM snapshot and we'll give this a try.";}i:2;i:3644;}i:72;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4018;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4018;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"Let's add the last disk attached to our VM. Our example VM's last device, /dev/sdn, wasn't partitioned earlier. Do so with:";}i:2;i:4020;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4149;}i:76;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:413:"
# parted --script --align optimal /dev/sdn mklabel gpt mkpart zfs13 0% 19000MB mkpart linux-swap 19000MB 100% print
Model: VBOX HARDDISK (scsi)
Disk /dev/sdn: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name        Flags
 1      1049kB  19.0GB  19.0GB               zfs13
 2      19.0GB  21.5GB  2474MB               linux-swap
";i:1;N;i:2;N;}i:2;i:4149;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4149;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"Let's add this device as a spare to scratchy. The zpool command syntax for adding devices is:";}i:2;i:4572;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4671;}i:80;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:51:"
zpool add [-fn] [-o property=value] pool vdev ...
";i:1;N;i:2;N;}i:2;i:4671;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4671;}i:82;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:4731;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"and the command for our case is shown below with a ";}i:2;i:4734;}i:84;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4785;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool status";}i:2;i:4787;}i:86;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4799;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" output that shows our spare.";}i:2;i:4801;}i:88;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4830;}i:89;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:484:"
# zpool add scratchy spare /dev/disk/by-partlabel/zfs12
# zpool status
  pool: scratchy
 state: ONLINE
  scan: none requested
config:

	NAME        STATE     READ WRITE CKSUM
	scratchy    ONLINE       0     0     0
	  zfs1      ONLINE       0     0     0
	  zfs2      ONLINE       0     0     0
	  zfs3      ONLINE       0     0     0
	  zfs4      ONLINE       0     0     0
	  zfs5      ONLINE       0     0     0
	  zfs6      ONLINE       0     0     0
	spares
	  zf12      AVAIL

";i:1;N;i:2;N;}i:2;i:4837;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4837;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"We have omitted setting the ashift as our setting applied to the entire pool when it was created. Remember that ashift can't be adjusted after creating the pool.";}i:2;i:5331;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5492;}i:93;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5494;}i:94;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"RAID stripes Vs. ZFS Stripes";i:1;i:3;i:2;i:5494;}i:2;i:5494;}i:95;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5494;}i:96;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5494;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:386:"Traditional RAID stripes spreads pieces of data across the numerous devices in the RAID 0, generally in uniform 128KB chunks parallel across all devices. ZFS, on the other hand, provides dynamic stripe sizing that adapts to the data, hardware, and workload. ZFS stripe sizes can vary non-uniformly up to 1MB on some systems, depending on the data's projected read and write performance.";}i:2;i:5534;}i:98;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5920;}i:99;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5920;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:717:"ZFS stripes are also flexible in their device composition. Traditional RAID stripes are fixed with device sizes and count. A RAID 0 with four 3TB disks will always have four disks with 12GB of storage, and while you can replace the 3TB disks with 4TB disks, the available storage will remain at 12GB unless the array is rebuilt. ZFS dynamically expands with number of disks and sizes of those disks so that everything is utilized. This eliminates the great amount of labor in expanding traditional storage arrays: backing up the existing data, destroying the array, rebuilding it with the new size, then restoring the data. This principle is applied to all redundancy levels of ZFS simply by adding VDEVs to the pool.";}i:2;i:5922;}i:101;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6639;}i:102;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6640;}i:103;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:6640;}}