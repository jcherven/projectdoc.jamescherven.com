a:172:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Principles of ZFS";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"From the zfs(8) manual page:";}i:2;i:32;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61;}i:6;a:3:{i:0;s:10:"quote_open";i:1;a:0:{}i:2;i:61;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" The  zfs command configures ZFS datasets within a ZFS storage pool, as described in zpool(8). A dataset is identified by a unique path within the ZFS namespace.";}i:2;i:63;}i:8;a:3:{i:0;s:11:"quote_close";i:1;a:0:{}i:2;i:224;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:224;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"It continues:";}i:2;i:226;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:240;}i:12;a:3:{i:0;s:10:"quote_open";i:1;a:0:{}i:2;i:240;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:377:" A  ZFS  storage  pool  is  a logical collection of devices that provide space for datasets. A storage pool is also the root of the ZFS file system hierarchy. The root of the pool can be accessed as a file system, such as mounting and unmounting,  taking  snapshots,  and  setting  properties. The physical storage characteristics, however, are managed by the zpool(8) command.";}i:2;i:242;}i:14;a:3:{i:0;s:11:"quote_close";i:1;a:0:{}i:2;i:619;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:619;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:405:"ZFS is very simple from the command usage standpoint, which is something quite admirable considering how powerful it can be. There are only two commands with which a ZFS is directly interacted: zfs(8), which helps you manage datasets, and zpool(8), which helps you manage the logical and physical organization of storage pools. Both of these have numerous subcommands that specify operations and settings.";}i:2;i:621;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1026;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1026;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:480:"Beneath these simple, straightforward commands is a lot of complex and and sophisticated machinery. Administering ZFS feels a lot less complex than it actually is, which is something to be thankful for. However, it's essential to understand the background mechanisms so that the most can be made of its strengths while avoiding its weaknesses. As with other powerful tools, the ability to easily do great amounts of work comes with the ability to do foolish or destructive things.";}i:2;i:1028;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1508;}i:21;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1510;}i:22;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Disk Handling";i:1;i:3;i:2;i:1510;}i:2;i:1510;}i:23;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1510;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1510;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"One of the dogged characteristics of attached storage in Linux is the ordering of block devices. While the system makes valiant attempts to order its devices properly between boots, it's not always the case they're in the same order as the last boot. For example, sometimes ";}i:2;i:1535;}i:26;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1809;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"/dev/sdp";}i:2;i:1811;}i:28;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1819;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:507:" is not the sixteenth disk in your rack. ZFS knows this so will report the disk's serial number when you ask how your array is doing instead of telling you that /dev/sdp has a problem. This means it's your responsibility to know what serial number is physically located where on your rack, and preparing your disks with GPT labels on initial installation is the best way to achieve this. The naming scheme is up to you, but something that indicates their physical location on the rack will help quite a lot.";}i:2;i:1821;}i:30;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2328;}i:31;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2328;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:626:"GPT labels reside in the partition metadata which inevitably involves our storage device in some low level partitioning. ZFS has the ability to handle raw disks on some systems. ZoL will deal with raw disks, which reduces the system complexity and in some specific cases perform a little better than on partitioned disks. But the marginal performance benefits this may bring do not justify the long term problems you can introduce. One of the disadvantages of raw disks in ZFS were were described above, but there is one more major issue that has to do with the dishonest nature of how hard disks report their actual capacity.";}i:2;i:2330;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2956;}i:34;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2956;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:794:"When replacing a failed disk in a ZFS array, the disk must be the same size or larger. This would be easy if every 4 TB disk had exactly 4,000,000MB in physical sectors, but there can be a variance in a few megabytes over or under depending on the make of the disk since vendors use different geometry and math in building their products. It's entirely possible to replace one 4 TB disk with another 4 TB disk and find that it does not resilver because it is a few sectors short. There are even more daunting cases where an older disk with 512-byte sectors is being replaced with a newer disk with 4K sectors, which in some cases will report being adequately large while in reality, due to the differences in the calculations used between the two sector sizes, may actually be a little smaller.";}i:2;i:2958;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3752;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3752;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:584:"Partitioning disks is a good practice to get around these issues. Partitioning also allows you to boot from a disk, for which you may find a use case. Most importantly, however, partitioning disks for ZFS can provide some free play space at the end of the disk for handling the size discrepancies discussed above. When a 4 TB disk with a 3.9TB primary partition and a 0.1TB swap partition fails down the road, another 4TB disk from a different vendor that is similarly partitioned can be confidently swapped, as parted(8) will align your storage space so that the new matches the old.";}i:2;i:3754;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4338;}i:40;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4340;}i:41;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Additional Considerations";i:1;i:3;i:2;i:4340;}i:2;i:4340;}i:42;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4340;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4340;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:268:"There are more considerations we should mind while handling disks in ZFS. As with traditional partitions with other filesystems, there are cases and workloads where sector size and the partition alignment can improve or degrade read and write performance in the array.";}i:2;i:4376;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4644;}i:46;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4644;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:771:"Partition alignment matters in ZFS, but it's easier to deal with than without ZFS. Without ZFS, it was often recommended to find the optimal partition alignment by discovering the individual disk's optimal I/O size and dividing it by the disk's physical block size. For large arrays, making this manageable meant having to very strictly match the disks used and severely limited options when replacing failed devices. ZFS supports mixed disks because it's expected that disk geometry differs between vendors and device types, and because it's expected that they will continue to change in the future.  Some current 4K sector disks will report having 512 byte sectors. ZFS doesn't assume that disks lie about their sector size, so we have to pay attention to it ourselves.";}i:2;i:4646;}i:48;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5417;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5417;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:580:"Partitioning a disk with 4K sectors when you and parted(8) expect 512 byte sectors presents a performance penalty because the boundaries of the partition will span a 4K sector. This means that a significant number of writes on the disk that would otherwise be a single 512 byte write will be two writes spanning sides of a 4K boundary, degrading performance considerably. There are other disks which expect the partition boundaries to be aligned to other values as well. The best way to deal with the vast majority of these cases is to align the partitioning of each disk along 1 ";}i:2;i:5419;}i:51;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"MB";}i:2;i:5999;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" boundaries or by a percentage of the disk. Parted(8) in CentOS allows us to do this.";}i:2;i:6001;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6086;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6086;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"ZFS's sector size is determined in a zpool property variable called ";}i:2;i:6088;}i:56;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:6156;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"ashift";}i:2;i:6158;}i:58;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:6164;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:318:", and naturally we want this variable to align with our physical and logical partition alignments. The ashift value is the exponent of two that corresponds to your sector size: in other words, ashift=9 will set ZFS for 512K sectors since that is expressed as 2^9. Ashift=12 translates to 4096, suitable for 4K sectors.";}i:2;i:6166;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6484;}i:61;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6484;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:543:"An ashift value of 12 is suitable for most cases, including our lab case. This isn't absolutely optimal for datasets where there are many tiny files smaller than 4K since any write smaller than 4K will not utilize the entire sector. This is only a performance-driven factor if most files in the dataset are smaller than 4K. In most other datasets the storage loss is not significant, but you are encouraged to optimize to your own satisfaction. This document will instruct setting ashift=12 since it covers a large general region of use cases.";}i:2;i:6486;}i:63;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7029;}i:64;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7031;}i:65;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Labeling & Partitioning Disks";i:1;i:3;i:2;i:7031;}i:2;i:7031;}i:66;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7031;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7031;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"Let's label and partition our disks using parted in CentOS. Before proceeding you should already have ";}i:2;i:7072;}i:69;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:39:"labenvironment#virtualbox_configuration";i:1;s:25:"attached disks to your VM";}i:2;i:7174;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:". In this VM, we are using 20GB virtual disks which we will partition with a 19GB primary GPT partition with the remainder of the disk as Linux Swap space. They are attached on /dev/sdb through /dev/sdm.";}i:2;i:7243;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7447;}i:72;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:7447;}i:73;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7447;}i:74;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7447;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" Launch parted(8) with the ";}i:2;i:7451;}i:76;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7478;}i:77;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:7480;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"align optimal";}i:2;i:7482;}i:79;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7495;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" flag & parameter to assure that our partition aligns to physical sectors: ";}i:2;i:7497;}i:81;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:34:"# parted --align optimal /dev/sdd ";i:1;N;i:2;N;}i:2;i:7577;}i:82;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7619;}i:83;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7619;}i:84;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7619;}i:85;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7619;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" Parted will display the physical sector size and the logical sector size with the ";}i:2;i:7623;}i:87;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7706;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"print";}i:2;i:7708;}i:89;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7713;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" command. ";}i:2;i:7715;}i:91;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:184:"(parted) print
Error: /dev/sdd: unrecognised disk label
Model: VBOX HARDDISK (scsi)
Disk /dev/sdd: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: unknown
Disk Flags:";i:1;N;i:2;N;}i:2;i:7730;}i:92;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7730;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7922;}i:94;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:7923;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"and we can see that our disk has 512B physical and logical sectors. We'll also notice that, as expected, this disk does not have a partition table.";}i:2;i:7926;}i:96;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8073;}i:97;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8073;}i:98;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8073;}i:99;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8073;}i:100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8073;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Add a GPT label with the command ";}i:2;i:8077;}i:102;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8111;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mklabel";}i:2;i:8113;}i:104;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:8120;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:": ";}i:2;i:8122;}i:106;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:213:"(parted) mklabel gpt
(parted) print
Model: VBOX HARDDISK (scsi)
Disk /dev/sdd: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start  End  Size  File system  Name  Flags
";i:1;N;i:2;N;}i:2;i:8129;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8129;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8350;}i:109;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8351;}i:110;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8354;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"print";}i:2;i:8356;}i:112;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:8361;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"ing the disk info confirms that this disk is ready to partition.";}i:2;i:8363;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8427;}i:115;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8427;}i:116;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8427;}i:117;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8427;}i:118;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8427;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" We need to ensure that the partition boundaries start and end on 1MB increments. In parted(8), using ";}i:2;i:8431;}i:120;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8533;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"optimal";}i:2;i:8534;}i:122;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8541;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:237:" alignment (as determined by parted) will ensure that if you start your partition at 0 percent, the first partition boundary will align with the first megabyte. Create a 19GB primary partition named zfs0 and the remainder swap partition:";}i:2;i:8542;}i:124;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:385:"(parted) mkpart zfs0 0% 19000MB
(parted) mkpart linux-swap 19000MB 100%
(parted) print
Model: VBOX HARDDISK (scsi)
Disk /dev/sdd: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name        Flags
 1      1049kB  19.0GB  19.0GB               primary
 2      19.0GB  21.5GB  2474MB               linux-swap
";i:1;N;i:2;N;}i:2;i:8784;}i:125;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9177;}i:126;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9177;}i:127;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9177;}i:128;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9177;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" We should verify that this is how parted sees the alignment on physical sectors on the disk with the ";}i:2;i:9181;}i:130;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:9283;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"align-check";}i:2;i:9285;}i:132;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:9296;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" command: ";}i:2;i:9298;}i:134;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:95:"(parted) align-check
alignment type(min/opt)  [optimal]/minimal?
Partition number? 1
1 aligned
";i:1;N;i:2;N;}i:2;i:9313;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9313;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9416;}i:137;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:9417;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"if so, parted returns ";}i:2;i:9420;}i:139;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:9442;}i:140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"X aligned";}i:2;i:9444;}i:141;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:9453;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" where X is the partition number.";}i:2;i:9455;}i:143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9488;}i:144;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9488;}i:145;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9488;}i:146;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9488;}i:147;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9488;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:" Remember that we used percentages to specify start and end points. Can we verify that the swap partition ends on the last full megabyte if we specify 100%? This is the documented behavior for parted, but let's check for our own satisfaction. ";}i:2;i:9492;}i:149;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:40:"(parted) align-check optimal 2
2 aligned";i:1;N;i:2;N;}i:2;i:9740;}i:150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9740;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9788;}i:152;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:9789;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:197:"parted verifies that this is indeed the case. We'll need to do this for each disk. The following is a scriptable command where the $DEVLETTER is the block device and $ZFSNUM is the partition name. ";}i:2;i:9792;}i:154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9994;}i:155;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:124:"# parted --script --align optimal /dev/$DEVLETTER \
mklabel gpt \
mkpart $ZFSNUM 0% 19000MB \
mkpart linux-swap 19000MB 100%";i:1;N;i:2;N;}i:2;i:9994;}i:156;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10126;}i:157;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10126;}i:158;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:10126;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10126;}i:160;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:10128;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10130;}i:162;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"=>";}i:2;i:10131;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Continue reading: ";}i:2;i:10133;}i:164;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:24:"zfsstorageconfigurations";i:1;s:26:"ZFS Storage Configurations";}i:2;i:10152;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10207;}i:166;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"=>";}i:2;i:10208;}i:167;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:10210;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:10212;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10212;}i:170;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10212;}i:171;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:10212;}}