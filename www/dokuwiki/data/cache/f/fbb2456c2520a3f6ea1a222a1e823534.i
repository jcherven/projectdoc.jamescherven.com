a:230:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Database Storage with Mirrors";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:490:"A fully redundant type of pool is the mirror, in which each VDEV in the pool has an exact copy running. Another way to think of this is that each VDEV has one or more copies of itself in the pool. Mirrors have excellent read performance since different parts of the same data can be read from all VDEVS with the requested data, however write performance is not as stellar. This is because the write operation is finished when the slowest device of all mirrored VDEVS has finished its write.";}i:2;i:44;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:534;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:534;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:604:"Mirrors at best reduce the usable storage space to half the capacity you've provided. While you might see the disk cost in running a mirror as excessive, it's easy to imagine situations where the importance of the data justifies the risk tolerance of doubling your disks up in a ZFS mirror. Databases are a good use case candidate for the redundancy features of ZFS. Mirrors are a good place to start with databases since they rank highest in a list of redundancy levels with the least performance impact, with increasing RAID-Z levels ranking lower and lower. We will discuss these in more detail later.";}i:2;i:536;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1140;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1140;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"This section will also deal with and test hot spare functionality in ZoL, since we now are working with fault tolerant configurations.";}i:2;i:1142;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1276;}i:12;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1278;}i:13;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Creating a ZFS Mirror";i:1;i:3;i:2;i:1278;}i:2;i:1278;}i:14;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1278;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1278;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:1310;}i:17;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1314;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"zpool create [pool] mirror [devices]";}i:2;i:1316;}i:19;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1352;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" command will create a pool with a mirrored VDEV containing the specified devices. Consider:";}i:2;i:1354;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1452;}i:22;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:77:"
# zpool create anaheim -o ashift=12 mirror /dev/disk/by-partlabel/zfs{0..1}
";i:1;N;i:2;N;}i:2;i:1452;}i:23;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1452;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"This creates a new pool named anaheim  that contains zfs0 and zfs1, each mirroring one another. If one fails, the pool is still alive and available. You can add arbitrary devices behind each ";}i:2;i:1538;}i:25;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1729;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"mirror";}i:2;i:1731;}i:27;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1737;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" VDEV, and any data written to that dataset will be written to all disks.";}i:2;i:1739;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1812;}i:30;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1812;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"To view detailed information about the pool we've just created, run:";}i:2;i:1814;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1888;}i:33;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:332:"
# zpool list -v anaheim
NAME   SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
anaheim  17.6G    64K  17.6G         -     0%     0%  1.00x  ONLINE  -
  mirror  17.6G    64K  17.6G         -     0%     0%
    zfs0      -      -      -         -      -      -
    zfs1      -      -      -         -      -      -
";i:1;N;i:2;N;}i:2;i:1888;}i:34;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1888;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"We can see that we have about 17.6GB available across two disks in this mirror. That's the net (actual) disk capacity of our 20GB device minus the ZFS overhead, which as you can see is somewhat significant compared to other filesystems.";}i:2;i:2230;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2466;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2466;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Let's expand this pool by adding another mirror VDEV.";}i:2;i:2468;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2527;}i:40;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:554:"
# zpool add anaheim mirror /dev/disk/by-partlabel/zfs{2..3}
# zpool list -v anaheim
NAME   SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
anaheim  35.2G   106K  35.2G         -     0%     0%  1.00x  ONLINE  -
  mirror  17.6G  99.5K  17.6G         -     0%     0%
    zfs0      -      -      -         -      -      -
    zfs1      -      -      -         -      -      -
  mirror  17.6G  6.50K  17.6G         -     0%     0%
    zfs2      -      -      -         -      -      -
    zfs3      -      -      -         -      -      -
";i:1;N;i:2;N;}i:2;i:2527;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2527;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"You now should see that another mirror VDEV was added to the pool ";}i:2;i:3091;}i:43;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:3157;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"anaheim";}i:2;i:3159;}i:45;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:3166;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:", showing a total available storage of 35.2GB. We could have created this configuration at the beginning with our ";}i:2;i:3168;}i:47;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:3282;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool create";}i:2;i:3284;}i:49;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:3296;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" command:";}i:2;i:3298;}i:51;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3313;}i:52;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:108:"
# zpool create anaheim mirror /dev/disk/by-partlabel/zfs{0..1} \
> mirror /dev/disk/by-partlabel/zfs{2..3}
";i:1;N;i:2;N;}i:2;i:3313;}i:53;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3313;}i:54;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:3431;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"but now you can see how simple it is to expand storage pools with ZFS.";}i:2;i:3434;}i:56;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3504;}i:57;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3506;}i:58;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Mountpoints of storage pools";i:1;i:3;i:2;i:3506;}i:2;i:3506;}i:59;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3506;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3506;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"When you run a ";}i:2;i:3546;}i:62;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:3561;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool create";}i:2;i:3563;}i:64;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:3575;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:", the pool is by default mounted at the root of your system. Creating the above pool mounted it at ";}i:2;i:3577;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3681;}i:67;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:8:"/anaheim";i:1;N;i:2;N;}i:2;i:3681;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3681;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"If you'd like the mountpoint to be elsewhere, specify it in your ";}i:2;i:3699;}i:70;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:3764;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool create";}i:2;i:3766;}i:72;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:3778;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" command with:";}i:2;i:3780;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3800;}i:75;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:32:"
# zpool create [-m mountpoint]
";i:1;N;i:2;N;}i:2;i:3800;}i:76;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3800;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"We will allow ZFS to use its default in this document to keep our commands more readable.";}i:2;i:3842;}i:78;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3931;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3931;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"ZFS's design rolled up many traditionally separated storage administration commands such as mount(8), umount(8), df(8), and so on into zfs(8) and zpool(8). Since ";}i:2;i:3933;}i:81;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4095;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" /anaheim ";}i:2;i:4097;}i:83;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4107;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" is the root of our dataset, we can ";}i:2;i:4109;}i:85;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4145;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"ls";}i:2;i:4147;}i:87;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4149;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" to it and treat ";}i:2;i:4151;}i:89;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4168;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"/anaheim";}i:2;i:4170;}i:91;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4178;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" as a local directory (which is naive), or we can use more features of ZFS to administer it as a dataset. Ideally, we'd like to use the ";}i:2;i:4180;}i:93;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4316;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"zfs create";}i:2;i:4318;}i:95;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4328;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" command to build our storage structure since this will allow us to manage subdirectories with the powerful ZFS features available to us.";}i:2;i:4330;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4467;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4467;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"To create another dataset called production that is beneath our root dataset, ";}i:2;i:4469;}i:100;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4547;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"anaheim";}i:2;i:4549;}i:102;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4556;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:", we'll use the ";}i:2;i:4558;}i:104;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4574;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"zfs";}i:2;i:4576;}i:106;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4579;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" command. Run:";}i:2;i:4581;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4601;}i:109;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:33:"
# zfs create anaheim/production
";i:1;N;i:2;N;}i:2;i:4601;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4601;}i:111;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4643;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Anaheim";}i:2;i:4645;}i:113;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4652;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" is our root dataset, and ";}i:2;i:4654;}i:115;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4680;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"production";}i:2;i:4682;}i:117;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4692;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" is another dataset within ";}i:2;i:4694;}i:119;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4721;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"anaheim";}i:2;i:4723;}i:121;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4730;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:". This allows us to use features like ZFS snapshots or exports on ";}i:2;i:4732;}i:123;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4798;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"anaheim";}i:2;i:4800;}i:125;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4807;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:4809;}i:127;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4814;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"production";}i:2;i:4816;}i:129;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4826;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" separately. In complex backup configurations, it is often the case that backup levels operate on different datasets, which this enables.";}i:2;i:4828;}i:131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4965;}i:132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4965;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"To see that these two datasets have different mountpoints, we can run a ";}i:2;i:4967;}i:134;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:5039;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"zfs list";}i:2;i:5041;}i:136;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:5049;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5051;}i:138;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5052;}i:139;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:175:"
# zfs list
NAME                 USED  AVAIL  REFER  MOUNTPOINT
anaheim               83K  34.1G    19K  /anaheim
anaheim/production    19K  34.1G    19K  /anaheim/production
";i:1;N;i:2;N;}i:2;i:5059;}i:140;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5244;}i:141;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Hot Spares";i:1;i:3;i:2;i:5244;}i:2;i:5244;}i:142;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5244;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5244;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"ZFS allows us to keep hot spare disks ready to replace faulted devices. In these cases, the pool will run in a degraded state until the faulted disk is replaced. Notable about this is the fact that the pool stays up and working";}i:2;i:5266;}i:145;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:5493;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:309:" with redundancy in place, ZFS does its best to keep the storage pool available and up. ZFS on Solaris has the ability to automatically replace a faulted device with a hot spare, but several years ago it was reported that this feature was not working in ZoL. We should test this to see if it's still the case.";}i:2;i:5496;}i:147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5805;}i:148;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5805;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Add a spare to any pool with the ";}i:2;i:5807;}i:150;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:5840;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"zpool add";}i:2;i:5842;}i:152;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:5851;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" command:";}i:2;i:5853;}i:154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5868;}i:155;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:51:"
zpool add [-fn] [-o property=value] pool vdev ...
";i:1;N;i:2;N;}i:2;i:5868;}i:156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5868;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"We'll add ";}i:2;i:5929;}i:158;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:5939;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"zfs12";}i:2;i:5941;}i:160;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:5946;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" to ";}i:2;i:5948;}i:162;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:5952;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"anaheim";}i:2;i:5954;}i:164;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:5961;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" as a spare.";}i:2;i:5963;}i:166;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5975;}i:167;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:481:"
# zpool add anaheim spare /dev/disk/by-partlabel/zfs12
# zpool status
  pool: anaheim
 state: ONLINE
  scan: none requested
config:

	NAME        STATE     READ WRITE CKSUM
	anaheim     ONLINE       0     0     0
	  mirror-0  ONLINE       0     0     0
	    zfs0    ONLINE       0     0     0
	    zfs1    ONLINE       0     0     0
	  mirror-1  ONLINE       0     0     0
	    zfs2    ONLINE       0     0     0
	    zfs3    ONLINE       0     0     0
	spares
	  zfs12     AVAIL
";i:1;N;i:2;N;}i:2;i:5982;}i:168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5982;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"Spares are listed with your ";}i:2;i:6473;}i:170;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:6501;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool status";}i:2;i:6503;}i:172;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:6515;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" output.";}i:2;i:6517;}i:174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6525;}i:175;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6525;}i:176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:233:"Let's simulate some load on this pool, then intentionally fail one of the drives to see how replacing with a hot spare should work. Then we'll roll back the VM to a previous state to try the same thing again with autoreplace enabled.";}i:2;i:6527;}i:177;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6760;}i:178;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6760;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:"We can put the pool under some write stress by creating a large file to store in it. Run it in a background shell as it is slow:";}i:2;i:6762;}i:180;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6896;}i:181;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:51:"
# cd anaheim/production
# tar -cf usr.tar /usr  &
";i:1;N;i:2;N;}i:2;i:6896;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6896;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"Alternatively you can put some stress on the pool creating a random file with the ";}i:2;i:6957;}i:184;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7039;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"dd";}i:2;i:7041;}i:186;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7043;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" command. Again, background this task as it can take some time:";}i:2;i:7045;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7114;}i:189;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:87:"
# cd /anaheim/production
# dd if=/dev/urandom of=content.file bs=1024 count=2000000 &
";i:1;N;i:2;N;}i:2;i:7114;}i:190;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7211;}i:191;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Manually Swapping Spares";i:1;i:4;i:2;i:7211;}i:2;i:7211;}i:192;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:7211;}i:193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7211;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:7244;}i:195;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7248;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"anaheim";}i:2;i:7250;}i:197;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7257;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:" storage pool should have some data on it at this point. Make sure you have a either a running or stopped VM snapshot taken before we proceed. We should now detach one of the virtual disks from the VM from the VM host machine. The Windows CMD command we'll use in this example is:";}i:2;i:7259;}i:199;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7545;}i:200;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:88:"
> vboxmanage storageattach "kero02" --storagectl "SAS" --port 1 --device --medium none
";i:1;N;i:2;N;}i:2;i:7545;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7545;}i:202;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:7643;}i:203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"where ";}i:2;i:7646;}i:204;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7652;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"kero02";}i:2;i:7654;}i:206;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7660;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" is our VM, our storage controller is named ";}i:2;i:7662;}i:208;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7706;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"SAS";}i:2;i:7708;}i:210;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7711;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:", and the disk we want to pull is on port 1, which in our case is ";}i:2;i:7713;}i:212;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7779;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"zfs1";}i:2;i:7781;}i:214;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7785;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:7787;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7788;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7788;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"When we start our VM up and check ";}i:2;i:7790;}i:219;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7824;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"zpool status";}i:2;i:7826;}i:221;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7838;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:", we find that the pool is available serving our files, but is running in a degraded state.";}i:2;i:7840;}i:223;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7931;}i:224;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:878:"
# zpool status
  pool: anaheim
 state: DEGRADED
status: One or more devices could not be used because the label is missing or
	invalid.  Sufficient replicas exist for the pool to continue
	functioning in a degraded state.
action: Replace the device using 'zpool replace'.
   see: http://zfsonlinux.org/msg/ZFS-8000-4J
  scan: none requested
config:

	NAME                     STATE     READ WRITE CKSUM
	anaheim                  DEGRADED     0     0     0
	  mirror-0               DEGRADED     0     0     0
	    zfs0                 ONLINE       0     0     0
	    1163554861012541616  UNAVAIL      0     0     0  was /dev/disk/by-partlabel/zfs1
	  mirror-1               ONLINE       0     0     0
	    zfs2                 ONLINE       0     0     0
	    zfs3                 ONLINE       0     0     0
	spares
	  zfs12                  AVAIL

errors: No known data errors
";i:1;N;i:2;N;}i:2;i:7938;}i:225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7938;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"We can still access the files in the pool. As an experiment, we can continue pulling drives to see how many failures this pool can survive.";}i:2;i:8826;}i:227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8965;}i:228;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8967;}i:229;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:8967;}}