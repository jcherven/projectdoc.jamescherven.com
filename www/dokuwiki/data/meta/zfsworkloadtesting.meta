a:2:{s:7:"current";a:9:{s:4:"date";a:2:{s:7:"created";i:1480564179;s:8:"modified";i:1480564220;}s:7:"creator";s:5:"James";s:4:"user";s:8:"jcherven";s:11:"last_change";a:7:{s:4:"date";i:1480564220;s:2:"ip";s:14:"68.202.214.157";s:4:"type";s:1:"E";s:2:"id";s:18:"zfsworkloadtesting";s:4:"user";s:8:"jcherven";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:8:"jcherven";s:5:"James";}s:5:"title";s:20:"ZFS Workload Testing";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:20:"zfs_workload_testing";s:5:"title";s:20:"ZFS Workload Testing";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:399:"ZFS Workload Testing

This portion of the documentation will be concerned with the test environment created in the previous section. We'll review some simple scripts that have been created to put a ZFS storage pool under a fairly typical read/write workload so that system resource statistics can be measured and analyzed. The synthetic benchmarking environment is available as a Docker container on";}s:8:"relation";a:2:{s:10:"references";a:1:{s:14:"labenvironment";b:1;}s:10:"firstimage";s:0:"";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}}s:10:"persistent";a:5:{s:4:"date";a:2:{s:7:"created";i:1480564179;s:8:"modified";i:1480564220;}s:7:"creator";s:5:"James";s:4:"user";s:8:"jcherven";s:11:"last_change";a:7:{s:4:"date";i:1480564220;s:2:"ip";s:14:"68.202.214.157";s:4:"type";s:1:"E";s:2:"id";s:18:"zfsworkloadtesting";s:4:"user";s:8:"jcherven";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:8:"jcherven";s:5:"James";}}}